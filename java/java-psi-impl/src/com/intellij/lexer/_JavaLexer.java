/* The following code was generated by JFlex 1.4.3 on 2/3/11 8:56 PM */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;
import com.intellij.psi.*;
import com.intellij.psi.impl.source.tree.JavaDocElementType;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/3/11 8:56 PM from the specification file
 * <tt>/home/sher/Projects/IDEA/tools/lexer/../../community/java/java-impl/src/com/intellij/lexer/_JavaLexer.flex</tt>
 */
class _JavaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\26\1\0\1\1\1\6\16\3\4\0\1\1\1\63"+
    "\1\31\1\0\1\2\1\72\1\70\1\27\1\73\1\74\1\5\1\65"+
    "\1\102\1\24\1\22\1\4\1\14\1\13\6\11\2\7\1\105\1\101"+
    "\1\66\1\62\1\67\1\104\1\106\1\12\1\16\1\12\1\21\1\23"+
    "\1\20\5\2\1\17\3\2\1\25\7\2\1\15\2\2\1\77\1\30"+
    "\1\100\1\71\1\10\1\0\1\37\1\43\1\44\1\52\1\35\1\36"+
    "\1\55\1\50\1\51\1\2\1\46\1\40\1\53\1\42\1\45\1\56"+
    "\1\2\1\33\1\41\1\32\1\34\1\57\1\60\1\54\1\47\1\61"+
    "\1\75\1\64\1\76\1\103\41\3\2\0\4\2\4\0\1\2\2\0"+
    "\1\3\7\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0"+
    "\u013f\2\31\0\162\2\4\0\14\2\16\0\5\2\11\0\1\2\21\0"+
    "\130\3\5\0\23\3\12\0\1\2\13\0\1\2\1\0\3\2\1\0"+
    "\1\2\1\0\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0"+
    "\202\2\1\0\4\3\3\0\105\2\1\0\46\2\2\0\2\2\6\0"+
    "\20\2\41\0\46\2\2\0\1\2\7\0\47\2\11\0\21\3\1\0"+
    "\27\3\1\0\3\3\1\0\1\3\1\0\2\3\1\0\1\3\13\0"+
    "\33\2\5\0\3\2\15\0\4\3\14\0\6\3\13\0\32\2\5\0"+
    "\13\2\16\3\7\0\12\3\4\0\2\2\1\3\143\2\1\0\1\2"+
    "\10\3\1\0\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2"+
    "\2\0\1\2\17\0\1\3\1\2\1\3\36\2\33\3\2\0\3\2"+
    "\60\0\46\2\13\3\1\2\u014f\0\3\3\66\2\2\0\1\3\1\2"+
    "\20\3\2\0\1\2\4\3\3\0\12\2\2\3\2\0\12\3\21\0"+
    "\3\3\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\1\2\3\0\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0"+
    "\3\3\11\0\1\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3"+
    "\4\2\15\0\3\3\1\0\6\2\4\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3\1\0"+
    "\5\3\4\0\2\3\2\0\3\3\13\0\4\2\1\0\1\2\7\0"+
    "\14\3\3\2\14\0\3\3\1\0\11\2\1\0\3\2\1\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\10\3"+
    "\1\0\3\3\1\0\3\3\2\0\1\2\17\0\2\2\2\3\2\0"+
    "\12\3\1\0\1\2\17\0\3\3\1\0\10\2\2\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2"+
    "\6\3\3\0\2\3\2\0\3\3\10\0\2\3\4\0\2\2\1\0"+
    "\3\2\4\0\12\3\1\0\1\2\20\0\1\3\1\2\1\0\6\2"+
    "\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2"+
    "\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\3"+
    "\3\0\3\3\1\0\4\3\11\0\1\3\17\0\11\3\11\0\1\2"+
    "\7\0\3\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\4\0\7\3\1\0\3\3\1\0\4\3\7\0\2\3"+
    "\11\0\2\2\4\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\12\2\1\0\5\2\2\0\1\3\1\2\7\3"+
    "\1\0\3\3\1\0\4\3\7\0\2\3\7\0\1\2\1\0\2\2"+
    "\4\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\20\2\4\0\6\3\2\0\3\3\1\0\4\3\11\0\1\3"+
    "\10\0\2\2\4\0\12\3\22\0\2\3\1\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\3\0\1\3\4\0\6\3"+
    "\1\0\1\3\1\0\10\3\22\0\2\3\15\0\60\2\1\3\2\2"+
    "\7\3\4\0\10\2\10\3\1\0\12\3\47\0\2\2\1\0\1\2"+
    "\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2"+
    "\1\3\2\2\6\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2"+
    "\1\0\6\3\2\0\12\3\2\0\2\2\42\0\1\2\27\0\2\3"+
    "\6\0\12\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3"+
    "\10\2\1\0\42\2\6\0\24\3\1\0\2\3\4\2\4\0\10\3"+
    "\1\0\44\3\11\0\1\3\71\0\42\2\1\0\5\2\1\0\2\2"+
    "\1\0\7\3\3\0\4\3\6\0\12\3\6\0\6\2\4\3\106\0"+
    "\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0"+
    "\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0"+
    "\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0"+
    "\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0"+
    "\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0"+
    "\11\3\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0"+
    "\113\2\3\0\3\2\17\0\15\2\1\0\4\2\3\3\13\0\22\2"+
    "\3\3\13\0\22\2\2\3\14\0\15\2\1\0\3\2\1\0\2\3"+
    "\14\0\64\2\40\3\3\0\1\2\3\0\2\2\1\3\2\0\12\3"+
    "\41\0\3\3\2\0\12\3\6\0\130\2\10\0\51\2\1\3\126\0"+
    "\35\2\3\0\14\3\4\0\14\3\12\0\12\3\36\2\2\0\5\2"+
    "\u038b\0\154\2\224\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2"+
    "\2\0\46\2\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2"+
    "\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2"+
    "\5\0\3\2\1\0\7\2\17\0\4\3\32\0\5\3\20\0\2\2"+
    "\23\0\1\2\13\0\4\3\6\0\6\3\1\0\1\2\15\0\1\2"+
    "\40\0\22\2\36\0\15\3\4\0\1\3\3\0\6\3\27\0\1\2"+
    "\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2"+
    "\3\0\3\2\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2"+
    "\6\3\1\0\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0"+
    "\3\2\1\0\137\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0"+
    "\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0"+
    "\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\3"+
    "\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0"+
    "\15\2\3\0\20\3\20\0\4\3\17\0\2\2\30\0\3\2\31\0"+
    "\1\2\6\0\5\2\1\0\207\2\2\0\1\3\4\0\1\2\13\0"+
    "\12\3\7\0\32\2\4\0\1\2\1\0\32\2\12\0\132\2\3\0"+
    "\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0"+
    "\2\2\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\20\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\0\1\44\1\45"+
    "\3\46\2\0\3\6\1\46\1\0\1\47\1\50\2\11"+
    "\2\12\34\3\1\51\3\3\1\52\6\3\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\41\1\67\2\46\2\0\1\6\1\44"+
    "\1\0\1\6\1\0\1\70\2\3\1\71\10\3\1\72"+
    "\13\3\1\73\11\3\1\74\14\3\1\75\1\0\2\67"+
    "\4\0\1\46\2\0\1\76\2\3\1\77\1\3\1\100"+
    "\1\101\6\3\1\102\6\3\1\103\3\3\1\104\1\3"+
    "\1\105\3\3\1\106\6\3\1\107\5\3\1\110\1\3"+
    "\1\41\4\0\1\45\1\46\1\3\1\111\2\3\1\112"+
    "\1\113\1\114\4\3\1\115\1\3\1\116\2\3\1\117"+
    "\1\3\1\120\1\121\1\3\1\122\13\3\1\123\1\3"+
    "\1\124\1\125\2\3\1\126\2\3\1\127\1\3\1\130"+
    "\1\131\5\3\1\132\1\3\1\133\2\3\1\134\3\3"+
    "\1\135\1\136\3\3\1\137\4\3\1\140\1\3\1\141"+
    "\1\142\2\3\1\143\1\144\1\3\1\145\4\3\1\146"+
    "\1\147\1\3\1\150\2\3\1\151\1\3\1\152\1\153"+
    "\1\3\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\107\0\u0927\0\u096e\0\u09b5\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\u09fc\0\u0a43\0\107\0\107\0\u0a8a\0\107\0\107"+
    "\0\107\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b"+
    "\0\u0cc2\0\u0d09\0\107\0\107\0\107\0\u0d50\0\u0d97\0\107"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\u155b\0\325\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\u1868\0\107"+
    "\0\107\0\107\0\107\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1a12\0\u1aa0\0\u1ae7\0\u1b2e\0\107\0\u1b75"+
    "\0\u1bbc\0\325\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\u1dad\0\u1df4\0\325\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\325\0\u2148"+
    "\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380"+
    "\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\107\0\u2762\0\u27a9"+
    "\0\107\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a"+
    "\0\325\0\u29e1\0\u2a28\0\325\0\u2a6f\0\325\0\325\0\u2ab6"+
    "\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\325\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\325\0\u2e0a\0\u2e51\0\u2e98"+
    "\0\325\0\u2edf\0\325\0\u2f26\0\u2f6d\0\u2fb4\0\325\0\u2ffb"+
    "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\325\0\u31a5\0\u31ec"+
    "\0\u3233\0\u327a\0\u32c1\0\325\0\u3308\0\107\0\u334f\0\u3396"+
    "\0\u33dd\0\u3424\0\u2837\0\u2837\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\325\0\325\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\325"+
    "\0\u36ea\0\325\0\u3731\0\u3778\0\325\0\u37bf\0\325\0\325"+
    "\0\u3806\0\325\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0"+
    "\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\325\0\u3b5a\0\325"+
    "\0\325\0\u3ba1\0\u3be8\0\325\0\u3c2f\0\u3c76\0\325\0\u3cbd"+
    "\0\325\0\325\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\325"+
    "\0\u3e67\0\325\0\u3eae\0\u3ef5\0\325\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\325\0\325\0\u4011\0\u4058\0\u409f\0\325\0\u40e6\0\u412d"+
    "\0\u4174\0\u41bb\0\325\0\u4202\0\325\0\325\0\u4249\0\u4290"+
    "\0\325\0\325\0\u42d7\0\325\0\u431e\0\u4365\0\u43ac\0\u43f3"+
    "\0\325\0\325\0\u443a\0\325\0\u4481\0\u44c8\0\325\0\u450f"+
    "\0\325\0\325\0\u4556\0\325";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\1\7"+
    "\1\4\1\7\1\4\1\7\1\10\5\4\1\11\1\4"+
    "\1\12\1\4\1\3\1\13\1\2\1\14\1\15\1\16"+
    "\1\4\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\4\4\1\27\1\30\2\4\1\31\1\32\1\33"+
    "\1\34\1\4\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\110\0"+
    "\1\3\4\0\1\3\17\0\1\3\62\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\30\4\31\0"+
    "\1\62\1\63\54\0\1\64\106\0\1\65\33\0\1\7"+
    "\1\66\1\7\1\0\2\7\2\0\1\67\1\70\1\71"+
    "\1\72\1\73\11\0\1\73\1\70\1\0\1\67\11\0"+
    "\1\71\43\0\1\74\1\75\1\76\1\0\2\76\1\77"+
    "\1\100\1\67\1\70\1\71\1\72\1\73\11\0\1\73"+
    "\1\70\1\0\1\67\2\0\1\100\6\0\1\71\1\0"+
    "\1\77\41\0\1\101\1\0\1\101\1\0\2\101\5\0"+
    "\1\102\110\0\1\103\35\0\1\104\24\0\6\13\1\0"+
    "\17\13\1\0\1\105\1\106\56\13\6\14\1\0\17\14"+
    "\1\0\1\14\1\107\1\110\55\14\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\4\1\111"+
    "\14\4\1\112\11\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\113\24\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\114\1\4\1\115\11\4\1\116\5\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\5\4\1\117\1\120\4\4\1\121\3\4\1\122\10\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\7\4\1\123\1\4\1\124\16\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\13\4"+
    "\1\125\14\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\126\1\4\1\127\12\4\1\130"+
    "\1\131\7\4\1\132\1\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\133\1\134"+
    "\1\4\1\135\22\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\4\1\136\11\4\1\137"+
    "\1\4\1\140\12\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\141\1\142\4\4"+
    "\1\143\2\4\1\144\11\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\4\4\1\145\3\4"+
    "\1\146\10\4\1\147\6\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\150\7\4"+
    "\1\151\14\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\13\4\1\152\14\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\4"+
    "\1\153\1\154\2\4\1\155\22\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\13\4\1\156"+
    "\14\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\16\4\1\157\11\4\107\0\1\160\106\0"+
    "\1\161\106\0\1\162\1\0\1\163\104\0\1\164\2\0"+
    "\1\165\103\0\1\166\3\0\1\167\102\0\1\170\5\0"+
    "\1\171\100\0\1\172\106\0\1\173\24\0\6\62\1\0"+
    "\17\62\1\0\60\62\5\174\1\175\101\174\7\0\1\7"+
    "\1\66\1\7\1\0\2\7\101\0\1\101\1\0\1\101"+
    "\1\0\2\101\3\0\1\70\1\71\1\0\1\73\11\0"+
    "\1\73\1\70\13\0\1\71\43\0\1\176\1\0\1\176"+
    "\1\0\2\176\3\0\1\70\1\71\2\0\1\177\11\0"+
    "\1\70\13\0\1\71\12\0\1\177\30\0\1\74\1\200"+
    "\1\74\1\0\2\74\3\0\1\70\1\71\1\72\1\73"+
    "\11\0\1\73\1\70\13\0\1\71\43\0\1\74\1\75"+
    "\1\76\1\0\2\76\101\0\1\74\1\75\1\76\1\0"+
    "\2\76\2\0\1\67\1\70\1\71\1\72\1\73\11\0"+
    "\1\73\1\70\1\0\1\67\11\0\1\71\34\0\7\201"+
    "\1\202\1\201\4\202\1\201\1\202\1\203\2\202\1\201"+
    "\1\202\1\201\1\204\1\0\6\201\3\202\1\203\2\201"+
    "\2\202\5\201\1\202\3\201\1\204\30\201\13\0\2\205"+
    "\2\0\1\67\20\0\1\67\55\0\1\101\1\206\1\101"+
    "\1\0\2\101\3\0\1\70\1\71\1\0\1\73\11\0"+
    "\1\73\1\70\13\0\1\71\56\0\1\207\64\0\6\13"+
    "\1\0\17\13\1\0\60\13\6\14\1\0\17\14\1\0"+
    "\60\14\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\2\4\1\210\2\4\1\211\7\4\1\212"+
    "\12\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\4\1\213\15\4\1\214\10\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\215\27\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\7\4\1\216\20\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\1\217\25\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\220\27\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\221"+
    "\21\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\13\4\1\222\14\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\4\1\223"+
    "\26\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\10\4\1\224\17\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\7\4\1\225"+
    "\20\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\7\4\1\226\20\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\10\4\1\227"+
    "\17\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\4\1\230\3\4\1\231\22\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\24\4\1\232\3\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\10\4\1\233\17\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\13\4\1\234\14\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\17\4\1\235\10\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\236\21\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\26\4\1\237\1\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\240\27\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\241\24\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\13\4"+
    "\1\242\14\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\243\27\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\244\6\4"+
    "\1\245\20\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\5\4\1\246\22\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\10\4"+
    "\1\247\17\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\5\4\1\250\22\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\251"+
    "\6\4\1\252\20\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\24\4\1\253\3\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\4\4\1\254\23\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\2\4\1\255\25\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\256\27\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\13\4\1\257\3\4\1\260\10\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\11\4\1\261\16\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\262\15\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\263\10\4\1\264\10\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\17\4"+
    "\1\265\10\4\107\0\1\266\24\0\5\174\1\267\101\174"+
    "\4\270\1\271\1\175\101\270\7\0\1\176\1\272\1\176"+
    "\1\0\2\176\3\0\1\70\1\71\14\0\1\70\13\0"+
    "\1\71\43\0\1\176\1\0\1\176\1\0\2\176\3\0"+
    "\1\70\1\71\14\0\1\70\13\0\1\71\43\0\1\74"+
    "\1\200\1\74\1\0\2\74\101\0\1\273\1\0\4\273"+
    "\1\0\1\273\1\0\2\273\1\0\1\273\1\0\1\274"+
    "\7\0\3\273\3\0\2\273\5\0\1\273\3\0\1\274"+
    "\30\0\7\201\1\202\1\275\4\202\1\201\1\202\1\203"+
    "\2\202\1\201\1\202\1\201\1\204\1\0\6\201\3\202"+
    "\1\203\2\201\2\202\5\201\1\202\3\201\1\204\30\201"+
    "\7\0\1\276\1\0\1\276\1\273\2\276\1\0\1\273"+
    "\1\0\2\273\1\0\1\273\1\277\1\274\7\0\3\273"+
    "\3\0\2\273\5\0\1\273\3\0\1\274\6\0\1\277"+
    "\31\0\1\300\2\0\2\205\2\0\1\67\20\0\1\67"+
    "\55\0\1\101\1\206\1\101\1\0\2\101\74\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\301\24\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\10\4\1\302\17\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\13\4"+
    "\1\303\14\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\7\4\1\304\20\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\1\305\25\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\306\24\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\21\4"+
    "\1\307\6\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\310\24\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\7\4"+
    "\1\311\20\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\5\4\1\312\22\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\5\4"+
    "\1\313\22\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\314\24\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\315"+
    "\27\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\23\4\1\316\4\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\17\4\1\317"+
    "\10\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\320\27\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\321\24\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\12\4\1\322\15\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\4\1\323\26\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\324\27\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\325\21\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\17\4\1\326\10\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\327\22\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\330\21\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\331\24\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\12\4\1\332\15\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\333\24\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\7\4\1\334\20\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\335\6\4\1\336\20\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\337\26\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\340\24\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\341\27\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\342\4\4\1\343"+
    "\14\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\5\4\1\344\22\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\11\4\1\345"+
    "\16\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\13\4\1\346\14\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\347\27\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\25\4\1\350\2\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\351\21\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\14\4\1\352\13\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\353\22\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\20\4\1\354\7\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\355\21\4"+
    "\25\0\4\174\1\356\1\267\101\174\5\270\1\357\101\270"+
    "\7\0\1\176\1\272\1\176\1\0\2\176\101\0\1\273"+
    "\1\360\4\273\1\0\1\273\1\0\2\273\1\0\1\273"+
    "\1\0\1\274\7\0\3\273\3\0\2\273\5\0\1\273"+
    "\3\0\1\274\37\0\1\176\1\0\1\176\1\0\2\176"+
    "\7\0\1\277\40\0\1\277\30\0\1\202\1\361\4\202"+
    "\1\0\1\202\1\0\2\202\1\0\1\202\1\0\1\274"+
    "\7\0\3\202\3\0\2\202\5\0\1\202\3\0\1\274"+
    "\37\0\1\276\1\362\1\276\1\273\2\276\1\0\1\273"+
    "\1\0\1\363\1\364\1\0\1\273\1\0\1\274\7\0"+
    "\1\273\1\363\1\273\3\0\2\273\5\0\1\364\3\0"+
    "\1\274\37\0\1\176\1\0\1\176\1\0\2\176\102\0"+
    "\1\300\2\0\2\205\74\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\7\4\1\365\20\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\26\4\1\366\1\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\4\1\367\26\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\10\4\1\370\17\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\371\24\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\372\27\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\6\4\1\373\21\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\4"+
    "\1\374\26\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\4\1\375\26\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\12\4"+
    "\1\376\15\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\17\4\1\377\10\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\4"+
    "\1\u0100\26\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\16\4\1\u0101\11\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\u0102"+
    "\27\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\12\4\1\u0103\15\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\25\4\1\u0104"+
    "\2\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\14\4\1\u0105\13\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\3\4\1\u0106"+
    "\24\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\16\4\1\u0107\11\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\7\4\1\u0108"+
    "\20\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\17\4\1\u0109\10\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\u010a\27\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\u010b\26\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\u010c\22\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\u010d\24\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\4\1\u010e\26\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\1\u010f\25\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\u0110\21\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\u0111\24\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\u0112\22\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\17\4\1\u0113\10\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\u0114\22\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\u0115\27\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\u0116\24\4\25\0"+
    "\4\270\1\271\1\357\101\270\7\0\1\273\1\360\4\273"+
    "\1\0\1\273\1\0\2\273\1\0\1\273\11\0\3\273"+
    "\3\0\2\273\5\0\1\273\43\0\1\202\1\361\4\202"+
    "\1\0\1\202\1\0\2\202\1\0\1\202\11\0\3\202"+
    "\3\0\2\202\5\0\1\202\43\0\1\276\1\362\1\276"+
    "\1\273\2\276\1\0\1\273\1\0\2\273\1\0\1\273"+
    "\11\0\3\273\3\0\2\273\5\0\1\273\36\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\17\4"+
    "\1\u0117\10\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\7\4\1\u0118\20\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\10\4"+
    "\1\u0119\17\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\20\4\1\u011a\7\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\u011b\21\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\u011c\27\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\5\4\1\u011d"+
    "\22\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\u011e\27\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\u011f\15\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\u0120\26\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\16\4\1\u0121\11\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\u0122\24\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\u0123\22\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\10\4\1\u0124\17\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\4\4\1\u0125\23\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\10\4\1\u0126\17\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\21\4\1\u0127\6\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\u0128\27\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\u0129\21\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\u012a\24\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\12\4\1\u012b\15\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\u012c\27\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\u012d\15\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\23\4"+
    "\1\u012e\4\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\17\4\1\u012f\10\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\u0130\24\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\7\4\1\u0131\20\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\15\4"+
    "\1\u0132\12\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\u0133\15\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\4\4"+
    "\1\u0134\23\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\13\4\1\u0135\14\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\10\4"+
    "\1\u0136\17\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\2\4\1\u0137\25\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\5\4"+
    "\1\u0138\22\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\u0139\15\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\u013a\24\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\u013b\27\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\u013c\27\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\u013d\24\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\u013e\24\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\u013f\21\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\10\4\1\u0140\17\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\u0141\27\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\24\4\1\u0142\3\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\10\4\1\u0143\17\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\u0144\24\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\12\4\1\u0145\15\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\u0146\24\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\10\4\1\u0147\17\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\u0148\24\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\u0149\24\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\u014a\27\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\17\4"+
    "\1\u014b\10\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\u014c\24\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\13\4"+
    "\1\u014d\14\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\u014e\27\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\20\4\1\u014f"+
    "\7\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\27\4\1\u0150\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\4\4\1\u0151\23\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\7\4\1\u0152\20\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\u0153\24\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\20\4\1\u0154\7\4\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17821];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\3\1\14\11\2\1\2\11"+
    "\1\0\3\11\2\1\2\0\4\1\1\0\3\11\2\1"+
    "\1\11\47\1\7\11\1\1\4\11\4\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\11\56\1\1\11\1\0\1\1"+
    "\1\11\4\0\1\1\2\0\55\1\1\11\4\0\142\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean myAssertKeywordEnabled;
  private boolean myJdk15Enabled;

  public _JavaLexer(boolean isAssertKeywordEnabled, boolean jdk15Enabled){
    this((java.io.Reader)null);
    myAssertKeywordEnabled = isAssertKeywordEnabled;
    myJdk15Enabled = jdk15Enabled;
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }


  _JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1788) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 66: 
          { return JavaTokenType.LONG_KEYWORD;
          }
        case 109: break;
        case 97: 
          { return JavaTokenType.PRIVATE_KEYWORD;
          }
        case 110: break;
        case 27: 
          { return JavaTokenType.COMMA;
          }
        case 111: break;
        case 23: 
          { return JavaTokenType.RBRACE;
          }
        case 112: break;
        case 22: 
          { return JavaTokenType.LBRACE;
          }
        case 113: break;
        case 65: 
          { return myJdk15Enabled ? JavaTokenType.ENUM_KEYWORD : JavaTokenType.IDENTIFIER;
          }
        case 114: break;
        case 63: 
          { return JavaTokenType.THIS_KEYWORD;
          }
        case 115: break;
        case 81: 
          { return JavaTokenType.CLASS_KEYWORD;
          }
        case 116: break;
        case 14: 
          { return JavaTokenType.PLUS;
          }
        case 117: break;
        case 53: 
          { return JavaTokenType.XOREQ;
          }
        case 118: break;
        case 60: 
          { return JavaTokenType.INT_KEYWORD;
          }
        case 119: break;
        case 78: 
          { return JavaTokenType.SHORT_KEYWORD;
          }
        case 120: break;
        case 43: 
          { return JavaTokenType.EQEQ;
          }
        case 121: break;
        case 99: 
          { return JavaTokenType.ABSTRACT_KEYWORD;
          }
        case 122: break;
        case 67: 
          { return JavaTokenType.NULL_KEYWORD;
          }
        case 123: break;
        case 93: 
          { return JavaTokenType.EXTENDS_KEYWORD;
          }
        case 124: break;
        case 50: 
          { return JavaTokenType.LTLT;
          }
        case 125: break;
        case 20: 
          { return JavaTokenType.LPARENTH;
          }
        case 126: break;
        case 12: 
          { return JavaTokenType.EXCL;
          }
        case 127: break;
        case 100: 
          { return JavaTokenType.STRICTFP_KEYWORD;
          }
        case 128: break;
        case 34: 
          { return JavaTokenType.DIVEQ;
          }
        case 129: break;
        case 87: 
          { return JavaTokenType.STATIC_KEYWORD;
          }
        case 130: break;
        case 39: 
          { return JavaTokenType.MINUSMINUS;
          }
        case 131: break;
        case 74: 
          { return JavaTokenType.FALSE_KEYWORD;
          }
        case 132: break;
        case 1: 
          { return JavaTokenType.BAD_CHARACTER;
          }
        case 133: break;
        case 88: 
          { return JavaTokenType.SWITCH_KEYWORD;
          }
        case 134: break;
        case 26: 
          { return JavaTokenType.SEMICOLON;
          }
        case 135: break;
        case 18: 
          { return JavaTokenType.XOR;
          }
        case 136: break;
        case 38: 
          { return JavaTokenType.DOUBLE_LITERAL;
          }
        case 137: break;
        case 45: 
          { return JavaTokenType.OREQ;
          }
        case 138: break;
        case 11: 
          { return JavaTokenType.EQ;
          }
        case 139: break;
        case 4: 
          { return JavaTokenType.DIV;
          }
        case 140: break;
        case 64: 
          { return JavaTokenType.ELSE_KEYWORD;
          }
        case 141: break;
        case 59: 
          { return JavaTokenType.NEW_KEYWORD;
          }
        case 142: break;
        case 56: 
          { return JavaTokenType.ELLIPSIS;
          }
        case 143: break;
        case 52: 
          { return JavaTokenType.ANDAND;
          }
        case 144: break;
        case 79: 
          { return JavaTokenType.BREAK_KEYWORD;
          }
        case 145: break;
        case 9: 
          { return JavaTokenType.CHARACTER_LITERAL;
          }
        case 146: break;
        case 51: 
          { return JavaTokenType.ANDEQ;
          }
        case 147: break;
        case 6: 
          { return JavaTokenType.INTEGER_LITERAL;
          }
        case 148: break;
        case 75: 
          { return JavaTokenType.FLOAT_KEYWORD;
          }
        case 149: break;
        case 10: 
          { return JavaTokenType.STRING_LITERAL;
          }
        case 150: break;
        case 70: 
          { return JavaTokenType.CHAR_KEYWORD;
          }
        case 151: break;
        case 89: 
          { return JavaTokenType.NATIVE_KEYWORD;
          }
        case 152: break;
        case 42: 
          { return JavaTokenType.DO_KEYWORD;
          }
        case 153: break;
        case 7: 
          { return JavaTokenType.DOT;
          }
        case 154: break;
        case 28: 
          { return JavaTokenType.TILDE;
          }
        case 155: break;
        case 108: 
          { return JavaTokenType.SYNCHRONIZED_KEYWORD;
          }
        case 156: break;
        case 32: 
          { return JavaTokenType.END_OF_LINE_COMMENT;
          }
        case 157: break;
        case 35: 
          { return JavaTokenType.ASTERISKEQ;
          }
        case 158: break;
        case 77: 
          { return JavaTokenType.SUPER_KEYWORD;
          }
        case 159: break;
        case 40: 
          { return JavaTokenType.MINUSEQ;
          }
        case 160: break;
        case 61: 
          { return JavaTokenType.LTLTEQ;
          }
        case 161: break;
        case 71: 
          { return JavaTokenType.GOTO_KEYWORD;
          }
        case 162: break;
        case 25: 
          { return JavaTokenType.RBRACKET;
          }
        case 163: break;
        case 86: 
          { return myAssertKeywordEnabled ? JavaTokenType.ASSERT_KEYWORD : JavaTokenType.IDENTIFIER;
          }
        case 164: break;
        case 33: 
          { return JavaTokenType.C_STYLE_COMMENT;
          }
        case 165: break;
        case 15: 
          { return JavaTokenType.LT;
          }
        case 166: break;
        case 41: 
          { return JavaTokenType.IF_KEYWORD;
          }
        case 167: break;
        case 8: 
          { return JavaTokenType.MINUS;
          }
        case 168: break;
        case 83: 
          { return JavaTokenType.WHILE_KEYWORD;
          }
        case 169: break;
        case 68: 
          { return JavaTokenType.BYTE_KEYWORD;
          }
        case 170: break;
        case 94: 
          { return JavaTokenType.FINALLY_KEYWORD;
          }
        case 171: break;
        case 72: 
          { return JavaTokenType.VOID_KEYWORD;
          }
        case 172: break;
        case 29: 
          { return JavaTokenType.QUEST;
          }
        case 173: break;
        case 19: 
          { return JavaTokenType.PERC;
          }
        case 174: break;
        case 107: 
          { return JavaTokenType.IMPLEMENTS_KEYWORD;
          }
        case 175: break;
        case 84: 
          { return JavaTokenType.THROWS_KEYWORD;
          }
        case 176: break;
        case 76: 
          { return JavaTokenType.FINAL_KEYWORD;
          }
        case 177: break;
        case 91: 
          { return JavaTokenType.DOUBLE_KEYWORD;
          }
        case 178: break;
        case 105: 
          { return JavaTokenType.PROTECTED_KEYWORD;
          }
        case 179: break;
        case 101: 
          { return JavaTokenType.CONTINUE_KEYWORD;
          }
        case 180: break;
        case 98: 
          { return JavaTokenType.PACKAGE_KEYWORD;
          }
        case 181: break;
        case 16: 
          { return JavaTokenType.GT;
          }
        case 182: break;
        case 24: 
          { return JavaTokenType.LBRACKET;
          }
        case 183: break;
        case 36: 
          { return JavaTokenType.LONG_LITERAL;
          }
        case 184: break;
        case 58: 
          { return JavaTokenType.FOR_KEYWORD;
          }
        case 185: break;
        case 96: 
          { return JavaTokenType.DEFAULT_KEYWORD;
          }
        case 186: break;
        case 47: 
          { return JavaTokenType.PLUSEQ;
          }
        case 187: break;
        case 85: 
          { return JavaTokenType.RETURN_KEYWORD;
          }
        case 188: break;
        case 62: 
          { return JavaTokenType.TRUE_KEYWORD;
          }
        case 189: break;
        case 48: 
          { return JavaTokenType.PLUSPLUS;
          }
        case 190: break;
        case 46: 
          { return JavaTokenType.OROR;
          }
        case 191: break;
        case 13: 
          { return JavaTokenType.OR;
          }
        case 192: break;
        case 3: 
          { return JavaTokenType.IDENTIFIER;
          }
        case 193: break;
        case 54: 
          { return JavaTokenType.PERCEQ;
          }
        case 194: break;
        case 30: 
          { return JavaTokenType.COLON;
          }
        case 195: break;
        case 102: 
          { return JavaTokenType.VOLATILE_KEYWORD;
          }
        case 196: break;
        case 104: 
          { return JavaTokenType.INTERFACE_KEYWORD;
          }
        case 197: break;
        case 106: 
          { return JavaTokenType.INSTANCEOF_KEYWORD;
          }
        case 198: break;
        case 103: 
          { return JavaTokenType.TRANSIENT_KEYWORD;
          }
        case 199: break;
        case 95: 
          { return JavaTokenType.BOOLEAN_KEYWORD;
          }
        case 200: break;
        case 69: 
          { return JavaTokenType.CASE_KEYWORD;
          }
        case 201: break;
        case 5: 
          { return JavaTokenType.ASTERISK;
          }
        case 202: break;
        case 90: 
          { return JavaTokenType.IMPORT_KEYWORD;
          }
        case 203: break;
        case 31: 
          { return JavaTokenType.AT;
          }
        case 204: break;
        case 44: 
          { return JavaTokenType.NE;
          }
        case 205: break;
        case 57: 
          { return JavaTokenType.TRY_KEYWORD;
          }
        case 206: break;
        case 80: 
          { return JavaTokenType.CATCH_KEYWORD;
          }
        case 207: break;
        case 37: 
          { return JavaTokenType.FLOAT_LITERAL;
          }
        case 208: break;
        case 17: 
          { return JavaTokenType.AND;
          }
        case 209: break;
        case 73: 
          { return JavaTokenType.THROW_KEYWORD;
          }
        case 210: break;
        case 55: 
          { return JavaDocElementType.DOC_COMMENT;
          }
        case 211: break;
        case 21: 
          { return JavaTokenType.RPARENTH;
          }
        case 212: break;
        case 2: 
          { return JavaTokenType.WHITE_SPACE;
          }
        case 213: break;
        case 92: 
          { return JavaTokenType.PUBLIC_KEYWORD;
          }
        case 214: break;
        case 49: 
          { return JavaTokenType.LE;
          }
        case 215: break;
        case 82: 
          { return JavaTokenType.CONST_KEYWORD;
          }
        case 216: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
